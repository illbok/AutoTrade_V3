"""Strategy and signal related tables."""

from __future__ import annotations

from datetime import datetime
from enum import Enum

try:  # pragma: no cover - optional dependency import
    from sqlalchemy import DateTime, Enum as SAEnum, ForeignKey, String, Text
    from sqlalchemy.dialects.postgresql import JSONB
    from sqlalchemy.orm import Mapped, mapped_column, relationship
except ModuleNotFoundError:  # pragma: no cover - fallback for tests
    from autotrade.db._compat_sqlalchemy import (  # type: ignore
        DateTime,
        Enum as SAEnum,
        ForeignKey,
        JSONB,
        Mapped,
        String,
        Text,
        mapped_column,
        relationship,
    )

from autotrade.db.base import Base, TimestampMixin


class SignalSide(str, Enum):
    """Directional signal enumeration."""

    BUY = "buy"
    SELL = "sell"


class Strategy(TimestampMixin, Base):
    """Registered trading strategies with parameter payloads."""

    __tablename__ = "strategies"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)
    description: Mapped[str | None] = mapped_column(Text, nullable=True)
    params: Mapped[dict[str, object]] = mapped_column(JSONB, default=dict)
    version: Mapped[str] = mapped_column(String(32), default="1.0.0")
    active: Mapped[bool] = mapped_column(default=True)

    signals: Mapped[list["Signal"]] = relationship(back_populates="strategy")


class Signal(TimestampMixin, Base):
    """Signals generated by strategy evaluations."""

    __tablename__ = "signals"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    strategy_id: Mapped[int] = mapped_column(ForeignKey("strategies.id"), index=True)
    symbol: Mapped[str] = mapped_column(String(20), index=True)
    side: Mapped[SignalSide] = mapped_column(SAEnum(SignalSide), index=True)
    entry_price: Mapped[float] = mapped_column(nullable=False)
    target_price: Mapped[float] = mapped_column(nullable=True)
    stop_price: Mapped[float] = mapped_column(nullable=True)
    confidence: Mapped[float] = mapped_column(nullable=False, default=0.0)
    params_snapshot: Mapped[dict[str, object]] = mapped_column(JSONB, default=dict)
    created_at_source: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), nullable=False
    )

    strategy: Mapped[Strategy] = relationship(back_populates="signals")


__all__ = ["Signal", "SignalSide", "Strategy"]
